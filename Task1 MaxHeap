/** This ADT is a Binary Heap implementation
 * with most operations included. Note that
 * array[0] is always empty or null (0).
 * @author Martzel P. Baste
 */
public class MaxHeap {
    private int[] array;
    private int count, capacity, index;

    /** Constructs a new MaxHeap object. */
    public MaxHeap() {
        capacity = 5;
        array = new int[setArrayMaxIndex(capacity)];
        count = 0;
    } // end of the constructor

    /** Constructs a new MaxHeap object based on user entry. */
    public MaxHeap(int capacity) {
        this.capacity = capacity;
        array = new int[setArrayMaxIndex(capacity)];
        count = 0;
    } // end of the constructor

    /** Sets the array length twice its capacity to address
     * issues on ArrayIndexOutOfBounds due to math formula
     * in accessing elements in the heap
     * @param capacity
     * @return
     */
    private int setArrayMaxIndex(int capacity) {
        index = (capacity * 2) + 2;
        return index;
    }

    /** Returns the number of elements in the heap.
     * @return the count of elements in the heap
     */
    public int heapCount() {
        return count;
    } // end of method

    // Basic setters and getters
    public boolean isEmpty() { return count == 0; }
    public boolean isFull() { return count >= capacity; }

    public void setCapacity(int capacity) {
        this.capacity = capacity;
        array = new int[setArrayMaxIndex(capacity)];
        System.out.println(setArrayMaxIndex(capacity));
    }

    public int getCapacity() { return capacity; }

    /** Inserts a value into the heap and maintains the heap property.
     * @param value the value to insert
     */
    public void upHeap(int value) {
        array[count + 1] = value;
        count++;
        int index = count;
        while (index > 1 && array[index] > array[index / 2]) {
            // Swap the current element with its parent if it is larger
            int temp = array[index];
            array[index] = array[index / 2];
            array[index / 2] = temp;
            index = index / 2; // Move up to the parent index
        } // end of while
    } // end of method

    /** Restores the heap property by moving the elements down the heap. */
    public void heapify() {
        if (count <= 1) {
            return; // No need to down-heap if there's only one element or no elements
        }
        int index = 1;
        while (index <= count / 2) {
            int leftChild = index * 2;
            int rightChild = index * 2 + 1;
            // Find the larger child
            int largerChild = (rightChild <= count && array[rightChild] > array[leftChild]) ? rightChild : leftChild;
            // If the larger child is greater than the current element, swap them
            if (array[largerChild] > array[index]) {
                int temp = array[largerChild];
                array[largerChild] = array[index];
                array[index] = temp;
                index = largerChild; // Move down to the larger child index
            } else {
                break; // Heap property is restored, stop down-heaping
            }
        } // end of while
    } // end of method

    /** Sorts the elements in the heap in descending order. */
    public int[] heapSort() {
        int sorted[] = new int[count + 1];
        int index = 0;
        for (int i = count; i >= 1; i--, index++) {
            sorted[index] = array[1]; // Store the maximum element in the sorted array
            array[1] = array[i]; // Move the last element to the root
            count--;
            heapify(); // Restore the heap property
        }
        return sorted;
    }

    /** Sorts the elements in the heap in descending order.
     * @return String sorted elements
     */
    public String heapSorting() {
        String hold = "";
        for (int i = count; i >= 1; i--) {
            hold += array[1] + " "; // Store the maximum element in the sorted array
            array[1] = array[i]; // Move the last element to the root
            count--;
            heapify(); // Restore the heap property
        }
        return hold;
    } // end of method

    /** Checks if a value already exists in the heap.
     * @param value the value to check
     * @return true if the value exists, false otherwise
     */
    public boolean checkDuplicate(int value) {
        for (int i = 1; i <= count; i++) {
            if (array[i] == value) {
                return true;
            }
        }
        return false;
    } // end of method

    /** Returns the index of the given value in the heap.
     * @param value the value to find the index of
     * @return the index of the value, or -1 if not found
     */
    private int getIndex(int value) {
        for (int i = 1; i <= count; i++) {
            if (array[i] == value) {
                return i;
            }
        }
        return -1; // Value not found in the heap
    } // end of method

    /** Returns the parent value of the given value in the heap.
     * @param value the value to find the parent of
     * @return the parent value
     */
    public int parent(int value) {
        int index = getIndex(value);
        if (index == -1 || index == 1) {
            return -1; // Value not found in the heap or root node (no parent)
        }
        return array[index / 2];
    } // end of method

    /** Returns the left child value of the given value in the heap.
     * @param value the value to find the left child of
     * @return the left child value
     */
    public int leftChild(int value) {
        int index = getIndex(value);
        if (index == -1) {
            return -1; // Value not found in the heap
        }
        int leftChild = index * 2;
        if (leftChild > count) {
            return -1; // No left child exists
        }
        return array[leftChild];
    } // end of method

    /** Returns the right child value of the given value in the heap.
     * @param value the value to find the right child of
     * @return the right child value
     */
    public int rightChild(int value) {
        int index = getIndex(value);
        if (index == -1) {
            return -1; // Value not found in the heap
        }
        int rightChild = index * 2 + 1;
        if (rightChild > count) {
            return -1; // No right child exists
        }
        return array[rightChild];
    } // end of method

    /** Prints the parents of the elements in the heap. */
    public String parents() {
        String hold = "";
        if (isEmpty()) {
            hold = "Heap is empty!";
        } else {
            for (int i = 2; i <= count; i += 2) {
                int parent = array[i / 2];
                hold += parent + " ";
            }
        }
        return hold;
    } // end of method

    /** Prints the left children of the elements in the heap. */
    public String leftChildren() {
        String hold = "";
        if (isEmpty()) {
            hold = "Heap is empty!";
        } else {
            for (int i = 1; i <= count; i++) {
                int leftChild = array[i * 2];
                if (leftChild == 0) {
                    break;
                } else if (leftChild != -1) {
                    hold += leftChild + " ";
                }
            }
        }
        return hold;
    } // end of method

    /** Prints the right children of the elements in the heap. */
    public String rightChildren() {
        String hold = "";
        if (isEmpty()) {
            hold = "Heap is empty!";
        } else {
            for (int i = 1; i <= count; i++) {
                int rightChild = array[i * 2 + 1];
                if (rightChild == 0) {
                    break;
                } else if (rightChild != -1) {
                    hold += rightChild + " ";
                }
            }
        }
        return hold;
    } // end of method

    /** Prints the leaf nodes of the heap. */
    public String leaves() {
        String hold = "";
        if (isEmpty()) {
            hold = "Heap is empty!";
        } else {
            for (int i = 1; i <= count; i++) {
                if (array[i * 2] == -1 && array[i * 2 + 1] == -1) {
                    hold += array[i] + " ";
                }
            }
        }
        return hold;
    } // end of method

    /** Prints the elements in the heap. */
    public String displayHeap() {
        String hold = "";
        if (isEmpty()) {
            hold = "Heap is empty!";
        } else {
            for (int i = 1; i <= count; i++) {
                hold += array[i] + " ";
            }
        }
        return hold;
    } // end of method

    /** Resets the heap by clearing the elements. */
    public void reset() {
        count = 0;
    } // end of method

    /** Print the root
     * @return
     */
    public int peek() {
        return (isEmpty()) ? -1 : array[1];
    }
} // end of class

